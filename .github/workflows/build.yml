# Controls when the workflow will run
on:
  # Allows you to run this workflow manually target the Actions tab
  workflow_dispatch:

name: Build
jobs:
  build:
    strategy:
      matrix:
        include:
          - { runson: 'windows-latest',   runsontype: 'windows', sys: 'mingw64', env: 'x86_64', name: 'CglpSDL2', binsuffix: '.exe'}
          - { runson: 'windows-latest',   runsontype: 'windows', sys: 'mingw32', env: 'i686',   name: 'CglpSDL2', binsuffix: '.exe'}
          - { runson: 'ubuntu-24.04',     runsontype: 'linux',   sys: 'usr',     env: 'x64',    name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'ubuntu-22.04',     runsontype: 'linux',   sys: 'usr',     env: 'x64',    name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'ubuntu-20.04',     runsontype: 'linux',   sys: 'usr',     env: 'x64',    name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'ubuntu-24.04-arm', runsontype: 'linux',   sys: 'usr',     env: 'arm64',  name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'ubuntu-22.04-arm', runsontype: 'linux',   sys: 'usr',     env: 'arm64',  name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'macos-10.15',      runsontype: 'mac',     sys: 'usr',     env: 'intel',  name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'macos-13',         runsontype: 'mac',     sys: 'usr',     env: 'intel',  name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'macos-14',         runsontype: 'mac',     sys: 'usr',     env: 'arm64',  name: 'CglpSDL2', binsuffix: ''}
          - { runson: 'macos-15',         runsontype: 'mac',     sys: 'usr',     env: 'arm64',  name: 'CglpSDL2', binsuffix: ''}


    runs-on: ${{matrix.runson}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          
      - if: ${{ matrix.runsontype == 'windows'}}
        name: Setup Msys
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: >-
            base-devel
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-SDL2             
            mingw-w64-${{matrix.env}}-make
            mingw-w64-${{matrix.env}}-cmake

      - if: ${{ matrix.runsontype == 'linux'}}
        name: install libsdl2-dev
        run: |
          sudo apt update
          sudo apt-get install -y libx11-dev libxft-dev libxext-dev libasound2-dev libgl-dev libglew-dev libgl1-mesa-dev
        
      - if: ${{ matrix.runsontype == 'windows'}}
        name: Build Game Windows
        shell: msys2 {0}
        run: |
          cd src/cglpSDL2
          mkdir build
          cd build
          cmake -G "Unix Makefiles" ..
          make
          
      - if: ${{ matrix.runsontype != 'windows'}}
        name: Build Game Other
        run: |
          cd src/cglpSDL2
          mkdir build
          cd build      
          cmake -DUSE_VENDORED_SDL=1 ..
          make

      - if: ${{ matrix.runsontype == 'mac'}}
        name: Copy Game And Assets Mac
        run: |
          mkdir ./Release
          mkdir "./Release/${{matrix.name}}.app"
          mkdir "./Release/${{matrix.name}}.app/Contents"
          mkdir "./Release/${{matrix.name}}.app/Contents/MacOS"
          cp "src/cglpSDL2/build/${{matrix.name}}" "./Release/${{matrix.name}}.app/Contents/MacOS/${{matrix.name}}"
          cp ./README.md "./Release/"
          cp ./LICENSE.txt "./Release/"
          mkdir icon.iconset
          
          #for PNG
          sips -z 16 16 "./meta/icon.png" --out icon.iconset/icon_16x16.png
          sips -z 32 32 "./meta/icon.png" --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 "./meta/icon.png" --out icon.iconset/icon_32x32.png
          sips -z 64 64 "./meta/icon.png" --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 "./meta/icon.png" --out icon.iconset/icon_128x128.png
          sips -z 256 256 "./meta/icon.png" --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 "./meta/icon.png" --out icon.iconset/icon_256x256.png
          sips -z 512 512 "./meta/icon.png" --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512 "./meta/icon.png" --out icon.iconset/icon_512x512.png
          sips -z 1024 1024 "./meta/icon.png" --out icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o ./icon.icns
          mkdir "./Release/${{matrix.name}}.app/Resources"
          mv ./icon.icns "./Release/${{matrix.name}}.app/Resources/icon.icns"
          
          #create PList
          echo "<?xml version='1.0' encoding='UTF-8'?>" > "./Release/${{matrix.name}}.app/Contents"
          echo "<!DOCTYPE plist PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "<plist version='1.0'>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "  <dict>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleExecutable</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>CglpSDL2</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleIdentifier</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>com.github.joyrider3774.cglpsdl2</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleName</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>Crisp Game Library Portable</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleIconFile</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>icon.icns</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleShortVersionString</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>0.01</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundleInfoDictionaryVersion</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>6.0</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>CFBundlePackageType</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <string>APPL</string>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>IFMajorVersion</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <integer>0</integer>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <key>IFMinorVersion</key>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "    <integer>1</integer>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "  </dict>" >> "./Release/${{matrix.name}}.app/Contents"
          echo "</plist>" >> "./Release/${{matrix.name}}.app/Contents"
          
      - if: ${{ matrix.runsontype != 'mac'}}
        name: Copy Game And Assets Other
        run: |
          mkdir ./Release
          mkdir "./Release/${{matrix.name}}"
          cp "src/cglpSDL2/build/${{matrix.name}}${{matrix.binsuffix}}" "./Release/${{matrix.name}}/"
          cp ./README.md "./Release/${{matrix.name}}/"
          cp ./LICENSE.txt "./Release/${{matrix.name}}/"
         
      - name: Store build
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.name}}-${{matrix.runson}}_${{ matrix.env }}
          path: ./Release/
